version: '3.7'

services:
  
  # Applications
  admin-service:
    profiles:
      - services
    image: admin-service
    ports:
      - "8000:8000"
    environment:
      - "spring.profiles.active=docker, logstash"
    depends_on:
      discovery-service:
        condition: service_healthy
    restart: on-failure
    links:
      - discovery-service

  config-service:
    profiles:
      - services
    image: config-service
    ports:
      - "8888:8888"
    environment:
      - "spring.profiles.active=docker, logstash"
    healthcheck:
      test: "curl --fail --silent localhost:8888/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  discovery-service:
    profiles:
      - services
    image: discovery-service
    ports:
      - "8761:8761"
    environment:
      - "spring.profiles.active=docker, logstash"
    depends_on:
      config-service:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  fx-rate-service:
    profiles:
      - services
    image: fx-rate-service
    deploy:
      replicas: 2
    ports:
      - "8081-8083:8081"
    environment:
      - "spring.profiles.active=docker, logstash"
    depends_on:
      discovery-service:
        condition: service_healthy
      elasticsearch:
        condition: service_started
      gateway-service:
        condition: service_started
    restart: on-failure
    links:
      - discovery-service

  gateway-service:
    profiles:
      - services
    image: gateway-service
    ports:
      - "8080:8080"
    environment:
      - "spring.profiles.active=docker, logstash"
    depends_on:
      discovery-service:
        condition: service_healthy
    restart: on-failure
    links:
      - discovery-service
  
  notification-service:
    profiles:
      - services
    image: notification-service
    ports:
      - "8100:8100"
    environment:
      - "spring.profiles.active=docker, logstash"
    depends_on:
      discovery-service:
        condition: service_healthy
    restart: on-failure
    links:
      - discovery-service

  zipkin:
    profiles:
      - es
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    restart: on-failure

  #  Elasticsearch
  setup:
    profiles:
      - setup
    build:
      context: elk/setup
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./elk/setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./elk/setup/lib.sh:/lib.sh:ro,Z
      - ./elk/setup/roles:/roles:ro,Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    depends_on:
      elasticsearch:
        condition: service_started

  elasticsearch:
    profiles:
      - es
    build:
      context: elk/elasticsearch
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - es-data:/usr/share/elasticsearch/data:Z
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms3g -Xmx3g
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      discovery.type: single-node
    restart: unless-stopped

  logstash:
    profiles:
      - es
    build:
      context: elk/logstash
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    ports:
      - "5000:5000"
      - "5001:5001/tcp"
      - "5044:5044"
    volumes:
      - ./elk/logstash//logs-index-template.json:/usr/share/logstash/logs-index-template.json
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    environment:
      LS_JAVA_OPTS: -Xms2560m -Xmx2560m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    depends_on:
      elasticsearch:
        condition: service_started
    restart: unless-stopped

  kibana:
    profiles:
      - es
    build:
      context: elk/kibana
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    ports:
      - "5601:5601"
    volumes:
      - ./elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    depends_on:
      elasticsearch:
        condition: service_started
    restart: unless-stopped

  fleet-server:
    profiles:
      - es
    build:
      context: elk/extensions/fleet
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    ports:
      - "8220:8220"
    volumes:
      - fleet-data:/usr/share/elastic-agent/state:Z
    environment:
      FLEET_SERVER_ENABLE: '1'
      FLEET_SERVER_INSECURE_HTTP: '1'
      FLEET_SERVER_HOST: 0.0.0.0
      FLEET_SERVER_POLICY_ID: fleet-server-policy
      KIBANA_FLEET_SETUP: '1'
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD:-}
    depends_on:
      elasticsearch:
        condition: service_started
      kibana:
        condition: service_started
    restart: on-failure
    hostname: fleet-server

  apm-server:
    profiles:
      - es
    build:
      context: elk/extensions/fleet
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    ports:
      - "8200:8200"
    volumes:
      - apm-data:/usr/share/elastic-agent/state:Z
    environment:
      FLEET_ENROLL: '1'
      FLEET_TOKEN_POLICY_NAME: Agent Policy APM Server
      FLEET_INSECURE: '1'
      FLEET_URL: http://fleet-server:8220
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD:-}
    depends_on:
      elasticsearch:
        condition: service_started
      kibana:
        condition: service_started
      fleet-server:
        condition: service_started
    restart: on-failure
    hostname: apm-server

  #  Monitoring
  prometheus:
    profiles:
      - monitor
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
    restart: unless-stopped

  grafana:
    profiles:
      - monitor
    image: grafana/grafana-oss
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    
    # Kafka
  zookeeper:
    profiles:
      - kafka
    image: bitnami/zookeeper
    ports:
      - "2181:2181"
    volumes:
      - zk-data:/bitnami
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    profiles:
      - kafka
    image: bitnami/kafka
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/bitnami
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      zookeeper:
        condition: service_started
    restart: on-failure

volumes:
  es-data:
  fleet-data:
  apm-data:
  grafana-data:
  zk-data:
  kafka-data: